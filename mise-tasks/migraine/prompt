#!/usr/bin/env php
<?php
//MISE description="Create prompt(s) for migration(s) listed in .migraine/migrations.json."
//MISE alias="p"
//USAGE flag "-f --force" help="Specify this and all prompts will be overwritten"
//USAGE arg "[migrationId]" help="The ID of the migration to generate a prompt for."

namespace Migraine;

$projectRoot = getenv('MISE_ORIGINAL_CWD');
$taskDir = getenv('MISE_TASK_DIR');
$limitMigrationId = $argv[1] ?? NULL;
if ($limitMigrationId === '*') {
    $limitMigrationId = NULL;
}
$force = getenv('usage_force') === 'true';

require_once "$taskDir/.includes/vendor/autoload.php";

$config = Config::forDirectory($projectRoot);

$sites = $config->get('sites');

$templatePromptsPath = $config->getPath(['templates', 'prompts']);
_move_migraine_files_to_output_dir("$taskDir/.templates/prompts/*.md", $templatePromptsPath);

_log('==> Moving prompt templates to "%s".', $templatePromptsPath);

$sourceTypesPath = $config->getPath(['inventory', 'source', 'types.json']);

if (!is_file($sourceTypesPath)
    || !($sourceTypes = json_decode(file_get_contents($sourceTypesPath), TRUE))
    || !is_array($sourceTypes)
) {
    _error("Could not load '%s'. Run migraine:inventory source.", $sourceTypesPath);
    exit(1);
}

$destTypesPath = $config->getPath(['inventory', 'dest', 'types.json']);

if (!is_file($destTypesPath)
    || !($destTypes = json_decode(file_get_contents($destTypesPath), TRUE))
    || !is_array($destTypes)
) {
    _error("Could not load '%s'. Run migraine:inventory dest.", $destTypesPath);
    exit(1);
}

$migrationsPath = $config->getPath(['migrations.json']);

if (!is_file($migrationsPath)
    || !($migrations = json_decode(file_get_contents($migrationsPath), TRUE))
    || !is_array($migrations)
    || !_validateMigrations($migrations, $sourceTypes, $destTypes)
) {
    _error("Could not load '%s'. Run migraine:llm:guess-migrations, or fix issues with it by hand.", $migrationsPath);
    exit(1);
}

if (isset($limitMigrationId)) {
    if (!isset($migrations[$limitMigrationId])) {
        _error("Unrecognised migration ID '%s'", $limitMigrationId);
        exit(1);
    }
    $migrations = [$limitMigrationId => $migrations[$limitMigrationId]];
}

$templateMigrationPromptPath = $config->getPath([
    'templates',
    'prompts',
    'migration-prompt.md',
]);
$templateMigrationPrompt = file_get_contents($templateMigrationPromptPath);

if (empty($templateMigrationPrompt)) {
    _error('Template migration prompt "%s" is empty. Please fix, or delete to regenerate default one.', $templateMigrationPromptPath);
    exit(1);
}

$sourceFieldsPath = $config->getPath(['inventory', 'source', 'fields.json']);

if (
    !is_file($sourceFieldsPath)
    || !($sourceFields = json_decode(file_get_contents($sourceFieldsPath), TRUE))
    || !is_array($sourceFields)
    || empty($sourceFields)
) {
    _error('Could not read fields from source inventory ("%s"). Run: migrate:inventory source', $sourceFieldsPath);
    exit(1);
}

$destFieldsPath = $config->getPath(['inventory', 'dest', 'fields.json']);

if (
    !is_file($destFieldsPath)
    || !($destFields = json_decode(file_get_contents($destFieldsPath), TRUE))
    || !is_array($destFields)
    || empty($destFields)
) {
    _error('Could not read fields from dest inventory ("%s"). Run: migrate:inventory dest', $destFieldsPath);
    exit(1);
}

$makeFieldTable = function(array $fields, string $entityTypeId, string $bundleId): ?string {
    if (!isset($fields[$entityTypeId][$bundleId])) {
        return NULL;
    }

    $table = new TextTable([
        'field_name' => 'FIELD NAME',
        'field_type' => 'TYPE',
        'cardinality' => 'CARDINALITY',
    ]);

    $rows = [];

    foreach ($fields[$entityTypeId][$bundleId] as $field) {
        $typeExtra = [];

        if (!empty($field['allowed_values'])) {
            $typeExtra[] = 'values: ' . implode(',', $field['allowed_values']);
        }

        if (!empty($field['reference_target_type'])) {
            $typeExtra[] = $field['reference_target_type']
              . (
                  !empty($field['reference_target_bundles'])
                      ? ': ' . (is_array($field['reference_target_bundles'])
                        ? implode(',', $field['reference_target_bundles'])
                        : (string) $field['reference_target_bundles'])
                      : ''
                );
        }

        $rows[] = [
            'field_name' => $field['field_name'],
            'field_type' => sprintf('%s%s',
                $field['field_type'],
                !empty($typeExtra) ? ' (' . implode(';', $typeExtra) . ')' : '',
            ),
            'cardinality' => $field['cardinality'] == -1 ? 'Unlimited' : $field['cardinality'],
        ];
    }

    return $table->render($rows);
};

_mkdir($config->getPath(['prompts']));

foreach ($migrations as $migrationId => [$sourceType, $sourceBundle, $destType, $destBundle]) {
    $promptPath = $config->getPath(['prompts', "$migrationId.md"]);

    if (is_file($promptPath) && !(isset($limitMigrationId) || $force)) {
        _log(
            'Skipping "%s" since it already exists. Pass \* --force to override.',
            $promptPath,
        );
        continue;
    }

    _log('Writing "%s"', $promptPath);

    file_put_contents($promptPath, strtr($templateMigrationPrompt, [
        '$MIGRATION_ID' => $migrationId,
        '$SOURCE_ENV_TYPE' => $sites['source']['drupalVersion'] ?? 'Drupal',
        '$SOURCE_TYPE' => $sourceType,
        '$SOURCE_BUNDLE' => $sourceBundle,
        '$DEST_ENV_TYPE' => $sites['dest']['drupalVersion'] ?? 'Drupal',
        '$DEST_TYPE' => $destType,
        '$DEST_BUNDLE' => $destBundle,
        '$SOURCE_FIELD_TABLE' => $makeFieldTable($sourceFields, $sourceType, $sourceBundle) ?? 'The usual properties.',
        '$DEST_FIELD_TABLE' => $makeFieldTable($destFields, $destType, $destBundle) ?? 'The usual properties.',
    ]));
}
